import { useCallback } from 'react';
import { useUIStore } from '../store/uiStore';

// „Ç®„É©„Éº„ÅÆÁ®ÆÈ°û
export interface AppError {
  code?: string;
  message: string;
  details?: any;
  retryable?: boolean;
}

// Firebase „Ç®„É©„Éº„Ç≥„Éº„Éâ„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
const FIREBASE_ERROR_MESSAGES: Record<string, string> = {
  // Authentication errors
  'auth/user-not-found': '„É¶„Éº„Ç∂„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì',
  'auth/wrong-password': '„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì',
  'auth/email-already-in-use': '„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
  'auth/weak-password': '„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂº±„Åô„Åé„Åæ„Åô',
  'auth/invalid-email': '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì',
  'auth/user-disabled': '„Åì„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
  'auth/too-many-requests': '„É™„ÇØ„Ç®„Çπ„Éà„ÅåÂ§ö„Åô„Åé„Åæ„Åô„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  'auth/network-request-failed': '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  'auth/popup-closed-by-user': '„É≠„Ç∞„Ç§„É≥„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü',
  'auth/popup-blocked': '„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Åå„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü',

  // Firestore errors
  'permission-denied': '„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì',
  'not-found': '„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì',
  'already-exists': '„Éá„Éº„Çø„ÅåÊó¢„Å´Â≠òÂú®„Åó„Å¶„ÅÑ„Åæ„Åô',
  'resource-exhausted': '„É™„ÇØ„Ç®„Çπ„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü',
  'failed-precondition': 'Êìç‰Ωú„ÅÆÂâçÊèêÊù°‰ª∂„ÅåÊ∫Ä„Åü„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì',
  'aborted': 'Êìç‰Ωú„Åå‰∏≠Êñ≠„Åï„Çå„Åæ„Åó„Åü',
  'out-of-range': 'ÂÄ§„ÅåÁØÑÂõ≤Â§ñ„Åß„Åô',
  'unimplemented': '„Åì„ÅÆÊ©üËÉΩ„ÅØÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì',
  'internal': '„Çµ„Éº„Éê„ÉºÂÜÖÈÉ®„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  'unavailable': '„Çµ„Éº„Éì„Çπ„Åå‰∏ÄÊôÇÁöÑ„Å´Âà©Áî®„Åß„Åç„Åæ„Åõ„Çì',
  'data-loss': '„Éá„Éº„Çø„ÅÆÊêçÂ§±„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  'unauthenticated': 'Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô',

  // Network errors
  'network-error': '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  'timeout': '„É™„ÇØ„Ç®„Çπ„Éà„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü',
  'connection-failed': 'Êé•Á∂ö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
};

// „É™„Éà„É©„Ç§ÂèØËÉΩ„Å™„Ç®„É©„Éº
const RETRYABLE_ERRORS = [
  'unavailable',
  'internal',
  'network-error',
  'timeout',
  'connection-failed',
  'resource-exhausted',
];

export function useErrorHandler() {
  const { showToast } = useUIStore();

  // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂèñÂæó
  const getErrorMessage = useCallback((error: any): string => {
    if (!error) return '‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';

    // Firebase „Ç®„É©„Éº„ÅÆÂ†¥Âêà
    if (error.code && FIREBASE_ERROR_MESSAGES[error.code]) {
      return FIREBASE_ERROR_MESSAGES[error.code];
    }

    // „Ç´„Çπ„Çø„É†„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    if (error.message) {
      return error.message;
    }

    // HTTP „Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ
    if (error.status) {
      switch (error.status) {
        case 400:
          return '„É™„ÇØ„Ç®„Çπ„Éà„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì';
        case 401:
          return 'Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô';
        case 403:
          return '„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì';
        case 404:
          return '„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì';
        case 429:
          return '„É™„ÇØ„Ç®„Çπ„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
        case 500:
          return '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
        case 503:
          return '„Çµ„Éº„Éì„Çπ„Åå‰∏ÄÊôÇÁöÑ„Å´Âà©Áî®„Åß„Åç„Åæ„Åõ„Çì';
        default:
          return `„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü (${error.status})`;
      }
    }

    return '‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
  }, []);

  // „Ç®„É©„Éº„ÅÆ„É™„Éà„É©„Ç§ÂèØËÉΩÊÄß„ÇíÂà§ÂÆö
  const isRetryable = useCallback((error: any): boolean => {
    if (!error) return false;

    // Firebase „Ç®„É©„Éº„ÅÆÂ†¥Âêà
    if (error.code) {
      return RETRYABLE_ERRORS.includes(error.code);
    }

    // HTTP „Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ
    if (error.status) {
      return error.status >= 500 || error.status === 429;
    }

    return false;
  }, []);

  // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
  const handleError = useCallback((
    error: any,
    options: {
      silent?: boolean;
      customMessage?: string;
      showRetry?: boolean;
      onRetry?: () => void;
    } = {}
  ) => {
    const { silent = false, customMessage, showRetry = false, onRetry } = options;

    console.error('Application Error:', error);

    if (silent) return;

    const message = customMessage || getErrorMessage(error);
    const retryable = isRetryable(error);

    // „Ç®„É©„ÉºË©≥Á¥∞„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Âá∫ÂäõÔºàÈñãÁô∫Áí∞Â¢ÉÔºâ
    if (process.env.NODE_ENV === 'development') {
      console.group('üö® Error Details');
      console.error('Error object:', error);
      console.error('Error code:', error?.code);
      console.error('Error message:', error?.message);
      console.error('Error stack:', error?.stack);
      console.error('Is retryable:', retryable);
      console.groupEnd();
    }

    // „Éà„Éº„Çπ„Éà„Åß„Ç®„É©„ÉºË°®Á§∫
    showToast(
      message,
      'error',
      {
        autoHideDuration: retryable ? 6000 : 4000,
        action: showRetry && retryable && onRetry ? {
          label: 'ÂÜçË©¶Ë°å',
          onClick: onRetry,
        } : undefined,
      }
    );

    // „Ç®„É©„Éº„É¨„Éù„Éº„ÉÜ„Ç£„É≥„Ç∞ÔºàÊú¨Áï™Áí∞Â¢ÉÔºâ
    if (process.env.NODE_ENV === 'production') {
      // TODO: „Ç®„É©„Éº„É¨„Éù„Éº„ÉÜ„Ç£„É≥„Ç∞„Çµ„Éº„Éì„ÇπÔºàSentryÁ≠âÔºâ„Å∏„ÅÆÈÄÅ‰ø°
      // reportError(error);
    }
  }, [getErrorMessage, isRetryable, showToast]);

  // ÈùûÂêåÊúü„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
  const handleAsyncError = useCallback(async (
    asyncFn: () => Promise<any>,
    options: {
      silent?: boolean;
      customMessage?: string;
      showRetry?: boolean;
      maxRetries?: number;
    } = {}
  ) => {
    const { maxRetries = 0, ...restOptions } = options;
    let lastError: any;
    let retryCount = 0;

    while (retryCount <= maxRetries) {
      try {
        return await asyncFn();
      } catch (error) {
        lastError = error;
        
        if (retryCount < maxRetries && isRetryable(error)) {
          retryCount++;
          // ÊåáÊï∞„Éê„ÉÉ„ÇØ„Ç™„Éï
          const delay = Math.min(1000 * Math.pow(2, retryCount - 1), 5000);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }
        
        break;
      }
    }

    handleError(lastError, restOptions);
    throw lastError;
  }, [handleError, isRetryable]);

  // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
  const showSuccess = useCallback((message: string) => {
    showToast(message, 'success');
  }, [showToast]);

  // Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
  const showWarning = useCallback((message: string) => {
    showToast(message, 'warning');
  }, [showToast]);

  // ÊÉÖÂ†±„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
  const showInfo = useCallback((message: string) => {
    showToast(message, 'info');
  }, [showToast]);

  return {
    handleError,
    handleAsyncError,
    getErrorMessage,
    isRetryable,
    showSuccess,
    showWarning,
    showInfo,
  };
}